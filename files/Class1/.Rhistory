se_hat <- sqrt( n*(var(y0)/(n0) + var(y1)/(n1)) - t(beta0+beta1)%*%var(dplyr::select(dataset_spread, -c("W","Y")))%*%(beta0+beta1))/sqrt(n)
lower_ci <- tauhat - 1.96 * se_hat
upper_ci <- tauhat + 1.96 * se_hat
return(c(ATE = tauhat, lower_ci = lower_ci, upper_ci = upper_ci))
}
difference_in_condmean_ols(RCT.linear)
difference_in_condmean_ols(RCT.non.linear)
model.first.data.set <- lm("Y ~ W*(X1 + X2 + X3 + X4)", data = RCT.linear)
# the following command line is also working
# model.first.data.set <- lm("Y ~.", data = RCT.linear)
model.first.data.set$coefficients
confint(model.first.data.set)
model.second.data.set <- lm("Y ~ X1 + X2 + X3 + X4 + W", data = RCT.non.linear)
model.second.data.set$coefficients
confint(model.second.data.set)
knitr::opts_chunk$set(echo = TRUE)
# load data
immo <- read.csv("2021.csv")
for (year in paste0("20", 16:21, ".csv")){
tmp <-  read.csv(year)
immo <- rbind(immo, tmp)
}
# # You could also used this if you don't see how the loop works
# df.2016 <- read.csv("2016.csv")
# df.2017 <- read.csv("2017.csv")
# df.2018 <- read.csv("2018.csv")
# df.2019 <- read.csv("2019.csv")
# df.2020 <- read.csv("2020.csv")
# immo <- rbind(df.2016, df.2017, df.2018, df.2019, df.2020)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
SURFACE_MAX = 200
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX & immo$valeur_fonciere > VALEUR_FONCIERE_MIN & immo$lot1_surface_carrez < SURFACE_MAX,]
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
dim(immo)
immo$annee <- year(immo$date_mutation)
immo$annee
View(immo)
immo <- read.csv("2021.csv")
knitr::opts_chunk$set(echo = TRUE)
# load data
immo <- read.csv("2021.csv")
for (year in paste0("20", 16:21, ".csv")){
tmp <-  read.csv(year)
immo <- rbind(immo, tmp)
}
# # You could also used this if you don't see how the loop works
# df.2016 <- read.csv("2016.csv")
# df.2017 <- read.csv("2017.csv")
# df.2018 <- read.csv("2018.csv")
# df.2019 <- read.csv("2019.csv")
# df.2020 <- read.csv("2020.csv")
# immo <- rbind(df.2016, df.2017, df.2018, df.2019, df.2020)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
SURFACE_MAX = 200
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX & immo$valeur_fonciere > VALEUR_FONCIERE_MIN & immo$lot1_surface_carrez < SURFACE_MAX,]
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
immo$annee <- year(immo$date_mutation)
immo$annee
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
df.2016 <- read.csv("2016.csv")
df.2017 <- read.csv("2017.csv")
df.2018 <- read.csv("2018.csv")
df.2019 <- read.csv("2019.csv")
df.2020 <- read.csv("2020.csv")
df.2021 <- read.csv("2021.csv")
immo <- rbind(df.2016, df.2017, df.2018, df.2019, df.2020)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
SURFACE_MAX = 200
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX & immo$valeur_fonciere > VALEUR_FONCIERE_MIN & immo$lot1_surface_carrez < SURFACE_MAX,]
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
immo$annee <- year(immo$date_mutation)
immo$annee
View(immo)
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
df.2016 <- read.csv("2016.csv")
df.2017 <- read.csv("2017.csv")
df.2018 <- read.csv("2018.csv")
df.2019 <- read.csv("2019.csv")
df.2020 <- read.csv("2020.csv")
df.2021 <- read.csv("2021.csv")
immo <- rbind(df.2016, df.2017, df.2018, df.2019, df.2020, df.2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
SURFACE_MAX = 200
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX & immo$valeur_fonciere > VALEUR_FONCIERE_MIN & immo$lot1_surface_carrez < SURFACE_MAX,]
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
immo$annee <- year(immo$date_mutation)
immo$annee
View(immo)
View(df.2017)
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
SURFACE_MAX = 200
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX & immo$valeur_fonciere > VALEUR_FONCIERE_MIN & immo$lot1_surface_carrez < SURFACE_MAX,]
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
immo$annee <- year(immo$date_mutation)
immo$annee
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
SURFACE_MAX = 200
# immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX & immo$valeur_fonciere > VALEUR_FONCIERE_MIN & immo$lot1_surface_carrez < SURFACE_MAX,]
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
immo$annee <- year(immo$date_mutation)
immo$annee
table(immo$annee)
immo$valeur_fonciere
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
# create a column year
immo$annee <- year(immo$date_mutation)
# take subtable
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX,]
immo <- immo[immo$valeur_fonciere > VALEUR_FONCIERE_MIN,]
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
# Be careful to have all the data in a folder named data
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
# Libraries used
library(ggplot2)
library(dplyr)
library(lubridate)
# create a column year
immo$annee <- year(immo$date_mutation)
# take subtable
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX,]
immo <- immo[immo$valeur_fonciere > VALEUR_FONCIERE_MIN,]
immo %>%
group_by(year) %>%
summarise(mean = ci(valeur_fonciere)[1],
lowCI = ci(valeur_fonciere)[2],
hiCI = ci(valeur_fonciere)[3])
immo %>%
group_by(year) %>%
summarise(mean = ci(valeur_fonciere)[1],
lowCI = ci(valeur_fonciere)[2],
hiCI = ci(valeur_fonciere)[3])
immo %>%
group_by(annee) %>%
summarise(mean = ci(valeur_fonciere)[1],
lowCI = ci(valeur_fonciere)[2],
hiCI = ci(valeur_fonciere)[3])
library(gmodels) # for ci
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
# Be careful to have all the data in a folder named data
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
# Libraries used
library(ggplot2)
library(dplyr) # group_by
library(lubridate) # function to treat automatically year
library(gmodels) # for ci
# create a column year
immo$annee <- year(immo$date_mutation)
# take subtable
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX,]
immo <- immo[immo$valeur_fonciere > VALEUR_FONCIERE_MIN,]
immo %>%
group_by(annee) %>%
summarise(mean = ci(valeur_fonciere)[1],
lowCI = ci(valeur_fonciere)[2],
hiCI = ci(valeur_fonciere)[3])
summary <- immo %>%
group_by(annee) %>%
summarise(mean = ci(valeur_fonciere)[1],
lowCI = ci(valeur_fonciere)[2],
hiCI = ci(valeur_fonciere)[3])
immo %>%
group_by(annee) %>%
summarise(mean = ci(valeur_fonciere)[1],
lowCI = ci(valeur_fonciere)[2],
hiCI = ci(valeur_fonciere)[3])
# keep only observations for which valeur fonciere is observed
immo <- immo[!is.na(immo$valeur_fonciere),]
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = ci(valeur_fonciere)[1],
lowCI = ci(valeur_fonciere)[2],
hiCI = ci(valeur_fonciere)[3])
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
# Be careful to have all the data in a folder named data
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
# Libraries used
library(ggplot2)
library(dplyr) # group_by
library(lubridate) # function to treat automatically year
# create a column year
immo$annee <- year(immo$date_mutation)
# take subtable
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX,]
immo <- immo[immo$valeur_fonciere > VALEUR_FONCIERE_MIN,]
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = mean(valeur_fonciere),
sd = sd(valeur_fonciere))
summary
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = mean(valeur_fonciere),
sd = sd(valeur_fonciere))
summary$se = summary$sd / sqrt(n)
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = mean(valeur_fonciere),
sd = sd(valeur_fonciere))
summary$se = summary$sd / sqrt(nrow(immo))
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = mean(valeur_fonciere),
sd = sd(valeur_fonciere))
summary$se = summary$sd / sqrt(nrow(immo))
ggplot(summary, aes(x = annee, y = mean)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), width=.2,
position=position_dodge(0.05))
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = mean(valeur_fonciere),
sd = sd(valeur_fonciere))
summary$se = summary$sd / sqrt(nrow(immo))
ggplot(summary, aes(x = annee, y = mean)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), width=.2,
position=position_dodge(0.05)) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
# Be careful to have all the data in a folder named data
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
# Libraries used
library(ggplot2)
library(dplyr) # group_by
library(lubridate) # function to treat automatically year
# create a column year
immo$annee <- year(immo$date_mutation)
# take subtable
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX,]
immo <- immo[immo$valeur_fonciere > VALEUR_FONCIERE_MIN,]
# keep only observations for which valeur fonciere is observed
immo <- immo[!is.na(immo$valeur_fonciere),] # ! indicates "opposite to" so that we keep only rows for which "valeur_fonciere" is observed
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = mean(valeur_fonciere),
sd = sd(valeur_fonciere))
summary$se = summary$sd / sqrt(nrow(immo))
ggplot(summary, aes(x = annee, y = mean)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), width=.2,
position=position_dodge(0.05)) +
theme_bw() +
ylab("Valeurs moyennes des ventes")
summary <- immo  %>%
group_by(annee) %>%
summarise(total = n())
summary <- immo  %>%
group_by(annee) %>%
summarise(total = n())
summary
Date2 <- "2016-01-01"
test <- 12 * (as.yearmon(Date1) - as.yearmon(Date2))
Date2 <- "2016-01-01"
test <- 12 * (as.yearmon(immo$date_mutation) - as.yearmon(Date2))
library(zoo)
Date2 <- "2016-01-01"
test <- 12 * (as.yearmon(immo$date_mutation) - as.yearmon(Date2))
test
test[40000]
test[90000]
library(zoo)
Date2 <- "2016-01-01"
immo$number.month <- 12 * (as.yearmon(immo$date_mutation) - as.yearmon(Date2))
immo %>%
group_by(number.month) %?%
summarise(count = n())
immo %>%
group_by(number.month) %>%
summarise(count = n())
immo %>%
group_by(number.month) %>%
summarise(count = n()) %>%
ggplot(aes(x = number.month, y = count)) %>%
geom_line()
immo %>%
group_by(number.month) %>%
summarise(count = n()) %>%
ggplot(aes(x = number.month, y = count)) +
geom_line()
immo$month <- month(immo$date_mutation)
immo %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = number.month, y = count, color = annee)) +
geom_line()
immo %>%
group_by(annee, month) %>%
summarise(count = n())
immo %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = annee)) +
geom_line()
immo %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = annee, group = annee)) +
geom_line()
immo %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line()
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line()
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line() +
theme_classic()
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line(size = 1.5) +
theme_classic()
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line(size = 1) +
theme_classic()
immo$month <- month(immo$date_mutation,label=TRUE, abbr=FALSE))
immo$month <- month(immo$date_mutation, label=TRUE, abbr=FALSE))
immo$month <- month(immo$date_mutation, label=TRUE, abbr=FALSE)
immo$month
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line(size = 1) +
theme_classic()
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line(size = 1) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line(size = 1) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab("Nombre de transactions par mois")
# 2021 is only first semester so we remove it from the plot
immo[immo$annee != 2021,] %>%
group_by(annee, month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, color = as.factor(annee), group = as.factor(annee))) +
geom_line(size = 1) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab("Nombre de transactions par mois") +
xlab("")
knitr::opts_chunk$set(echo = TRUE)
# We could have done a loop to avoid copy paste, but let's keep it like this for the first class
# Be careful to have all the data in a folder named data
df_2016 <- read.csv("./data/2016.csv")
df_2017 <- read.csv("./data/2017.csv")
df_2018 <- read.csv("./data/2018.csv")
df_2019 <- read.csv("./data/2019.csv")
df_2020 <- read.csv("./data/2020.csv")
df_2021 <- read.csv("./data/2021.csv")
immo <- rbind(df_2016, df_2017, df_2018, df_2019, df_2020,df_2021)
# at the beginning of your notebook
VALEUR_FONCIERE_MAX = 2000000
VALEUR_FONCIERE_MIN = 50000
# Libraries used
library(ggplot2)
library(dplyr) # group_by
library(lubridate) # function to treat automatically year
# create a column year
immo$annee <- year(immo$date_mutation)
# take subtable
immo <- immo[immo$valeur_fonciere < VALEUR_FONCIERE_MAX,]
immo <- immo[immo$valeur_fonciere > VALEUR_FONCIERE_MIN,]
# keep only observations for which valeur fonciere is observed
immo <- immo[!is.na(immo$valeur_fonciere),] # ! indicates "opposite to" so that we keep only rows for which "valeur_fonciere" is observed
summary <- immo  %>%
group_by(annee) %>%
summarise(mean = mean(valeur_fonciere),
sd = sd(valeur_fonciere))
summary$se = summary$sd / sqrt(nrow(immo))
ggplot(summary, aes(x = annee, y = mean)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), width=.2,
position=position_dodge(0.05)) +
theme_bw() +
ylab("Valeurs moyennes des ventes")
