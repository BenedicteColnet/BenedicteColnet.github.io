classification <- agnes(scale(decathlon[,1:10]), method = "UPGMA")
library(cluster)
classification <- agnes(scale(decathlon[,1:10]), method = "average")
plot(classification ,xlab="Individu", which.plot=2, main="Dendrogramme")
library(cluster)
classification <- agnes(scale(decathlon[,1:10]), method = "UPGMA")
library(cluster)
classification <- agnes(scale(decathlon[,1:10]), method = "ward")
plot(classification ,xlab="Individu", which.plot=2, main="Dendrogramme")
classification$order
classification$height
heigth <- as.hclust(classification)
plot(heigth)
heigth
heigth <- as.hclust(classification)
plot(heigth, type = "h", ylab = "hauteurs"))
heigth <- as.hclust(classification)
plot(heigth, type = "h", ylab = "hauteurs")
heigth <- as.hclust(classification)
plot(heigth, ylab = "hauteurs")
?as.hclust
heigth <- as.hclust(classification)
plot(heigth$height, ylab = "hauteurs")
heigth <- as.hclust(classification)
plot(heigth$height, type = "h", ylab = "hauteurs")
height <- as.hclust(classification)
plot(height$height, type = "h", ylab = "hauteurs")
height <- as.hclust(classification)
plot(rev(height$height), type = "h", ylab = "hauteurs")
classe <- cutree(classification, k = 4)
decathlon.with.classif <- cbind(decath, classe=a s.factor(classe))
decathlon.with.classif <- cbind(decath, classe= as.factor(classe))
decathlon.with.classif <- cbind(decath, classe = as.factor(classe))
decathlon.with.classif <- cbind(decathlon, classe = as.factor(classe))
View(decathlon.with.classif)
catdes(decath.comp, num.var = 14)
catdes(decathlon.with.classif, num.var = 14)
?catdes
# you can use your previous result, or launch again a PCA step.
res.pca <- PCA(decath, quanti.sup=11:12, quali.sup=13, graph=F)
# you can use your previous result, or launch again a PCA step.
res.pca <- PCA(decathlon, quanti.sup=11:12, quali.sup=13, graph=F)
# you can use your previous result, or launch again a PCA step.
# res.pca <- PCA(decathlon, quanti.sup=11:12, quali.sup=13, graph=F)
res.pca$eig
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
res.hcpc <- HCPC(res.pca) # you can add  consol=FALSE if you don't want an automatic output
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
res.hcpc <- HCPC(res.pca, consol=FALSE)
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
res.hcpc <- HCPC(res.pca, consol = FALSE) # if consol is TRUE, it means that you allow a consolidation with K means after cutting the tree
plot (res.hcpc, choice = "map") ## ACP with classes
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
res.hcpc <- HCPC(res.pca, consol = FALSE) # if consol is TRUE, it means that you allow a consolidation with K means after cutting the tree
plot (res.hcpc, choice = "map") ## ACP with classes
#plot (res.hcpc, choice = "map") ## ACP with classes
plot(res.hcpc, choice = "3D.map") ## 3D trees
plot(res.hcpc, choice = "map") ## ACP with classes
res.hcpc$desc.var
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
res.hcpc <- HCPC(res.pca, consol = FALSE) # if consol is TRUE, it means that you allow a consolidation with K means after cutting the tree
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
res.hcpc <- HCPC(res.pca, consol = FALSE,  graph=FALSE) # if consol is TRUE, it means that you allow a consolidation with K means after cutting the tree
# be careful  to the new option
res.pca <- PCA(decathlon, quanti.sup = 11:12, ncp = 8, quali.sup = 13, graph=F)
res.hcpc <- HCPC(res.pca, consol = FALSE,  graph=FALSE) # if consol is TRUE, it means that you allow a consolidation with K means after cutting the tree
plot(res.hcpc, choice = "tree") ## ACP with classes
plot(res.hcpc, choice = "3D.map") ## 3D trees
plot(res.hcpc, choice = "3D.map") ## 3D trees
plot(res.hcpc, choice = "map") ## 3D trees
res.hcpc$desc.var
fviz_cluster(res.hcpc,
repel = TRUE,            # Avoid label overlapping
show.clust.cent = TRUE, # Show cluster centers
palette = "jco",         # Color palette see ?ggpubr::ggpar
ggtheme = theme_minimal(),
main = "Factor map"
)
library(factoextra)
fviz_cluster(res.hcpc,
repel = TRUE,            # Avoid label overlapping
show.clust.cent = TRUE, # Show cluster centers
palette = "jco",         # Color palette see ?ggpubr::ggpar
ggtheme = theme_minimal(),
main = "Factor map"
)
plot(res.hcpc, choice = "map", axis = (2,3)) ## map
plot(res.hcpc, choice = "map") ## map
plot(res.hcpc, choice = "map", axes = c(2,3) ## map
plot(res.hcpc, choice = "map", axes = c(2,3)) ## map
plot(res.hcpc, choice = "map", axes = c(3,4)) ## map
plot(res.hcpc, choice = "map", axes = c(3,4), ind.names = FALSE) ## map
plot(res.hcpc, choice = "map", axes = c(3,4), ind.names = TRUE, rect = FALSE) ## map
plot(res.hcpc, choice = "map", axes = c(3,4), ind.names = TRUE, tree.barplot = FALSE) ## map
plot(res.hcpc, choice = "map", axes = c(3,4), ind.names = TRUE, draw.tree = FALSE) ## map
plot(res.hcpc, choice = "map", axes = c(3,4), ind.names = TRUE, draw.tree = FALSE, centers.plot = TRUE) ## map
plot(res.hcpc, choice = "map", axes = c(3,4), ind.names = FALSE, draw.tree = FALSE, centers.plot = TRUE) ## map
catdes(res.hcpc, num.var = 14)
plot(catdes(decathlon.with.classif, num.var = 14))
plot(classification, type = "map", axis = c(1,3))
plot(classification,  axis = c(1,3))
plot(classification, choice = "map", axes = c(3,4), ind.names = FALSE, draw.tree = FALSE, centers.plot = TRUE)
plot(res.hcpc, choice = "map", axes = c(1,3), ind.names = FALSE, draw.tree = FALSE, centers.plot = TRUE) ## map
catdes(res.hcpc)
res.hcpc$desc.var
res.hcpc$desc.axes
res.hcpc$data.clust
res.hcpc$data.clust$clust
decathlon.with.classif.hcpc <- cbind(decathlon, res.hcpc$data.clust$clust)
catdes(decathlon.with.classif.hcpc)
decathlon.with.classif.hcpc <- cbind(decathlon, class = res.hcpc$data.clust$clust)
catdes(decathlon.with.classif.hcpc, num.var = 14)
decathlon.with.classif.hcpc <- cbind(res.pca$eig, class = res.hcpc$data.clust$clust)
catdes(decathlon.with.classif.hcpc, num.var = 14)
res.hcpc$data.clust
res.pca$eig
res.pca$cor
res.pca$svd
res.hcpc$desc.var
res.hcpc$desc.axes
res.hcpc$desc.axes
plot(res.hcpc, choice = "map", axes = c(3,4), ind.names = TRUE, draw.tree = FALSE, centers.plot = TRUE) ## map
plot(res.hcpc, choice = "map", axes = c(1,3), ind.names = TRUE, draw.tree = FALSE, centers.plot = TRUE) ## map
res.hcpc$desc.ind
# command to vizualize parangon
res.hcpc$desc.ind$para
res.hcpc$desc.ind$dist
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
X1 <- var(mvrnorm(n = 100, mu = c(0,1), Sigma))
X1
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- var(mvrnorm(n = 100, mu = c(0,1), Sigma))
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 100, mu = c(0,1), Sigma)
simulated_data
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 100, mu = c(0,1), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
View(output)
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 100, mu = c(0,1), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output <- rbind(output, c("X1" = 0.5, "X2" = 0.5))
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
geom_jitter()
library(ggplot2)
ggplot(output, aes(x = X1)) +
geom_boxplot() +
geom_jitter()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
geom_jitter()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
geom_point()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X1)) +
geom_histogram() +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram() +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 40) +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.8) +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.2) +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6) +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X2)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 100, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output <- rbind(output, c("X1" = 0.5, "X2" = -0.5)) # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X2)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
geom_point(output, aes(x = X1, y = X2)) +
geom_point()
ggplot(output, aes(x = X1, y = X2)) +
geom_point()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 100, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output <- rbind(output, c("X1" = 0.5, "X2" = -0.5)) # outlier step
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 100, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output <- rbind(output, c("X1" = 0.8, "X2" = -0.8)) # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X2)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X1, y = X2)) +
geom_point()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 100, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output <- rbind(output, c("X1" = 1, "X2" = -1)) # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X2)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X1, y = X2)) +
geom_point()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 1000, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output <- rbind(output, c("X1" = 2, "X2" = -2)) # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X2)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X1, y = X2)) +
geom_point()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 1000, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output$type  <- rep("regular", nrow(output))
output[1001,] <- c("X1" = 2, "X2" = -2, "type" = "outlier") # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 500, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output$type  <- rep("regular", nrow(output))
output[501,] <- c("X1" = 2, "X2" = -2, "type" = "outlier") # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 500, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output$type  <- rep("regular", nrow(output))
#output[501,] <- c("X1" = 2, "X2" = -2, "type" = "outlier") # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X2)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
library(MASS) # for simulations
Sigma <- matrix(c(1,0.8,1,0.8),2,2)
simulated_data <- mvrnorm(n = 500, mu = c(0,0), Sigma)
output <- data.frame(simulated_data)
names(output) <- c("X1", "X2")
output[501,] <- c("X1" = 2, "X2" = -2) # outlier step
library(ggplot2)
ggplot(output, aes(y = X1)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(y = X2)) +
geom_boxplot() +
theme_classic()
ggplot(output, aes(x = X1)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X2)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.6, color = "grey") +
theme_classic()
ggplot(output, aes(x = X1, y = X2)) +
geom_point()
ggplot(output, aes(x = X1, y = X2)) +
geom_point() +
theme_classic()
library("dplyr")
simdat = lapply(c(0, 8), function(mx) {
lapply(c(0,8), function(my) {
tibble(x = rnorm(100, mean = mx, sd = 2),
y = rnorm(100, mean = my, sd = 2),
class = paste(mx, my, sep = ":"))
}) %>% bind_rows
}) %>% bind_rows
simdat
library("dplyr")
simdat = lapply(c(0, 8), function(mx) {
lapply(c(0,8), function(my) {
data.frame(x = rnorm(100, mean = mx, sd = 2),
y = rnorm(100, mean = my, sd = 2),
class = paste(mx, my, sep = ":"))
}) %>% bind_rows
}) %>% bind_rows
simdat
library("dplyr")
simdat = lapply(c(0, 4), function(mx) {
lapply(c(0,4), function(my) {
data.frame(x = rnorm(100, mean = mx, sd = 2),
y = rnorm(100, mean = my, sd = 2),
class = paste(mx, my, sep = ":"))
}) %>% bind_rows
}) %>% bind_rows
simdat
ggplot(simdat, aes(x = x, y = y, col = class)) + geom_point() +
coord_fixed()
library("dplyr")
simdat = lapply(c(0, 4), function(mx) {
lapply(c(0,4), function(my) {
data.frame(x = rnorm(100, mean = mx, sd = 2),
y = rnorm(100, mean = my, sd = 2),
class = paste(mx, my, sep = ":"))
}) %>% bind_rows
}) %>% bind_rows
simdat
ggplot(simdat, aes(x = x, y = y, col = class)) + geom_point() +
coord_fixed()
wss = tibble(k = 1:8, value = NA_real_)
wss$value[1] = sum(scale(simdatxy, scale = FALSE)^2)
library("dplyr")
simdat = lapply(c(0, 4), function(mx) {
lapply(c(0,4), function(my) {
data.frame(x = rnorm(100, mean = mx, sd = 2),
y = rnorm(100, mean = my, sd = 2),
class = paste(mx, my, sep = ":"))
}) %>% bind_rows
}) %>% bind_rows
simdat
simdatxy = simdat[, c("x", "y")] # without class label
ggplot(simdat, aes(x = x, y = y, col = class)) + geom_point() +
coord_fixed()
wss = tibble(k = 1:8, value = NA_real_)
wss$value[1] = sum(scale(simdatxy, scale = FALSE)^2)
for (i in 2:nrow(wss)) {
km  = kmeans(simdatxy, centers = wss$k[i])
wss$value[i] = sum(km$withinss)
}
ggplot(wss, aes(x = k, y = value)) + geom_col()
